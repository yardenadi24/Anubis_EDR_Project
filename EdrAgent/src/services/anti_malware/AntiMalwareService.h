#pragma once
#include <Windows.h>
#include <string>
#include <vector>
#include <map>
#include <mutex>
#include <queue>
#include <condition_variable>
#include <thread>
#include <atomic>
#include <functional>

#include "..\IService.h"
#include "..\..\managers\service_manager\ServiceManager.h"
#include "..\..\commons\logger\Logger.h"
#include "..\..\modules\security_modules\ISecurityModule.h"
#include "..\security_event\SecurityEventService.h"


// Callback for scan results
typedef void (*VerdictCallback)(BOOL verdict, void* context);

// Scan request structure
struct ScanRequest {
    std::string filePath;
    VerdictCallback callback;
    void* context;
};

// Anti-malware service class
class AntiMalwareService : public IService
{
private:
    const std::string m_name = "AntiMalware";
    ServiceState m_state;
    ServiceManager* m_serviceManager;
    SecurityEventService* m_security_event_service;
    Logger& m_logger;
    std::map<std::string, std::string> m_config;
    std::mutex m_configMutex;

    // Security modules
    std::vector<std::shared_ptr<ISecurityModule>> m_modules;
    std::mutex m_modulesMutex;

    // Scan queue and processing
    std::queue<ScanRequest> m_scanQueue;
    std::mutex m_queueMutex;
    std::condition_variable m_queueCondition;
    std::thread m_scanThread;
    std::atomic<BOOL> m_isRunning;

    // Statistics
    std::atomic<DWORD> m_totalScans;
    std::atomic<DWORD> m_totalBlocked;

    // Configuration
    DWORD m_scanTimeoutMs;

public:
    AntiMalwareService(ServiceManager* pServiceManager);
    ~AntiMalwareService();

    // IService interface implementation
    const std::string& GetName() const override { return m_name; }
    bool Initialize() override;
    bool Start() override;
    void Stop() override;
    bool Configure(const std::map<std::string, std::string>& config) override;
    ServiceState GetState() const override { return m_state; }
    void SetServiceManager(ServiceManager* manager) override { m_serviceManager = manager; }

    // Security module management
    BOOL RegisterModule(std::shared_ptr<ISecurityModule> module);
    BOOL UnregisterModule(const std::string& moduleName);
    size_t GetModuleCount();
    std::vector<std::string> GetModuleNames();

    // File scanning
    BOOL ScanFile(const std::string& filePath, VerdictCallback callback, void* context);
    DWORD GetScanTimeout() const { return m_scanTimeoutMs; }

    // Statistics
    DWORD GetTotalScans() const { return m_totalScans; }
    DWORD GetTotalBlockedFiles() const { return m_totalBlocked; }

private:
    BOOL LoadConfiguration();
    void ScanThreadProc();
    BOOL ProcessScanRequest(const ScanRequest& request);
    void SortModulesByPriority();
};